{
    "openapi": "3.0.0",
    "info": {
        "description": "Documentation of the Market Data API.",
        "title": "Market Data API.",
        "contact": {
            "name": "API Support",
            "email": "support@example.com"
        },
        "license": {
            "name": "MIT",
            "url": "http://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api-keys": {
            "get": {
                "description": "Retrieves all API keys associated with the specified user ID.",
                "tags": [
                    "api-keys"
                ],
                "summary": "List API keys",
                "operationId": "listAPIKeys",
                "parameters": [
                    {
                        "description": "The user ID to list API keys for",
                        "name": "user_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/APIKeyResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            },
            "post": {
                "description": "Creates a new API key with the specified name and permissions for the given user.",
                "tags": [
                    "api-keys"
                ],
                "summary": "Create an API key",
                "operationId": "createAPIKey",
                "parameters": [
                    {
                        "x-go-name": "Name",
                        "name": "name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-go-name": "UserID",
                        "name": "user_id",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-go-name": "Permissions",
                        "name": "permissions",
                        "in": "query",
                        "style": "form",
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/CreateAPIKeyResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/api-keys/{key}": {
            "delete": {
                "description": "Deletes the specified API key.",
                "tags": [
                    "api-keys"
                ],
                "summary": "Delete an API key",
                "operationId": "deleteAPIKey",
                "parameters": [
                    {
                        "description": "The API key to delete",
                        "name": "key",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/EmptyResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/bigtable/chat/{rowKey}": {
            "get": {
                "description": "Retrieves the chat history for the specified row key from BigTable.",
                "tags": [
                    "bigtable"
                ],
                "summary": "Get chat history",
                "operationId": "getChatHistory",
                "parameters": [
                    {
                        "description": "The row key to get chat history from",
                        "name": "rowKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ChatHistoryResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            },
            "post": {
                "description": "Creates a new chat conversation with the specified messages at the given row key.",
                "tags": [
                    "bigtable"
                ],
                "summary": "Create chat",
                "operationId": "createChat",
                "parameters": [
                    {
                        "description": "The row key to create the chat at",
                        "name": "rowKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "$ref": "#/components/responses/ChatHistoryResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            },
            "delete": {
                "description": "Removes the specified row from the chat table in BigTable.",
                "tags": [
                    "bigtable"
                ],
                "summary": "Delete chat",
                "operationId": "deleteChatKey",
                "parameters": [
                    {
                        "description": "The row key to delete from the chat table",
                        "name": "rowKey",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "$ref": "#/components/responses/EmptyResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/current-price/{symbol}": {
            "get": {
                "description": "This will retrieve the most recent trade data for the specified stock symbol including\ncurrent price, bid/ask prices, trade size, and other market data from Redis.",
                "tags": [
                    "current-price"
                ],
                "summary": "Last trade price",
                "operationId": "getLastTradePrice",
                "parameters": [
                    {
                        "description": "The stock symbol to get the current price for",
                        "name": "symbol",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/CurrentPriceResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/darkpool-trends": {
            "get": {
                "description": "Retrieves the top K darkpool trends based on the provided count and start date.\nData is fetched from cache if available, otherwise from the primary service.",
                "tags": [
                    "darkpool"
                ],
                "summary": "Daily darkpool trends",
                "operationId": "getDarkpoolTrends",
                "parameters": [
                    {
                        "description": "Number of darkpool trends to return.",
                        "name": "k",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Start date for fetching trends (YYYY-MM-DD).",
                        "name": "start",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort by field.",
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "total_volume",
                                "relative_volume_change",
                                "absolute_volume_change",
                                "darkpool_ratio"
                            ]
                        }
                    },
                    {
                        "description": "Use dollar weighed volumes instead of raw volumes.",
                        "name": "useDollar",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/DarkpoolTrendsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/darkpool/daily/{ticker}": {
            "get": {
                "description": "Retrieves daily darkpool trend metrics for the specified ticker within the given date range.\nIf no dates are provided, defaults to the last 30 days.",
                "tags": [
                    "darkpool"
                ],
                "summary": "Ticker darkpool trends",
                "operationId": "getDailyDarkpoolTrend",
                "parameters": [
                    {
                        "description": "The ticker symbol to fetch trends for.",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date for fetching trends (YYYY-MM-DD).",
                        "name": "start_date",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for fetching trends (YYYY-MM-DD).",
                        "name": "end_date",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/DailyDarkpoolTrendResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/darkpools": {
            "get": {
                "description": "Retrieves dark-pool trades in the requested date window with optional\nprice/size/value filters and consolidation.\nIf the query matches the pre-cached slice (last 10 days, default filters) the\nresult is served from Redis; otherwise it falls back to Bigtable.\nCurrent price is attached in parallel.",
                "tags": [
                    "darkpool"
                ],
                "summary": "Darkpool trades",
                "operationId": "getDarkpoolTrades",
                "parameters": [
                    {
                        "x-go-name": "Ticker",
                        "description": "The stock ticker symbol",
                        "name": "ticker",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-go-name": "Start",
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "start",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-go-name": "End",
                        "description": "End date in YYYY-MM-DD format",
                        "name": "end",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "x-go-name": "Limit",
                        "description": "Maximum number of trades to return",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "default": 1000
                        }
                    },
                    {
                        "x-go-name": "MinSize",
                        "description": "Minimum trade size",
                        "name": "min_size",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "x-go-name": "MaxSize",
                        "description": "Maximum trade size",
                        "name": "max_size",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "x-go-name": "MinPrice",
                        "description": "Minimum trade price",
                        "name": "min_price",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "x-go-name": "MaxPrice",
                        "description": "Maximum trade price",
                        "name": "max_price",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "x-go-name": "MinValue",
                        "description": "Minimum trade value",
                        "name": "min_value",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    },
                    {
                        "x-go-name": "MaxValue",
                        "description": "Maximum trade value",
                        "name": "max_value",
                        "in": "query",
                        "schema": {
                            "type": "number",
                            "format": "double"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/DarkpoolTradeResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/darkpools/daily-summary": {
            "get": {
                "description": "Retrieves a day-by-day breakdown of darkpool trades showing weighted average price,\ntotal daily trade value, and trade volume. Data is fetched directly from Bigtable\nas we need raw unconsolidated trades for accurate calculations.",
                "tags": [
                    "darkpool"
                ],
                "summary": "Ticker darkpool summary",
                "operationId": "getDarkpoolDailySummary",
                "parameters": [
                    {
                        "description": "The ticker symbol to fetch summary for",
                        "name": "ticker",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The start date to fetch summary for",
                        "name": "start",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end date to fetch summary for",
                        "name": "end",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/DarkpoolDailySummaryResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/dashboard/watchlist/{watchlist_id}": {
            "get": {
                "description": "Retrieves the tickers or data associated with a specific dashboard watchlist ID.",
                "tags": [
                    "watchlist"
                ],
                "summary": "Dashboard watchlist",
                "operationId": "getDashboardWatchlist",
                "parameters": [
                    {
                        "description": "ID of the watchlist to retrieve.",
                        "name": "watchlist_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/DashboardWatchlistResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/dashboard/watchlist/{watchlist_id}/predictions": {
            "get": {
                "description": "Retrieves the predictions for a specific dashboard watchlist ID.",
                "tags": [
                    "watchlist"
                ],
                "summary": "Dashboard watchlist predictions",
                "operationId": "getWatchlistPredictions",
                "parameters": [
                    {
                        "description": "ID of the watchlist to retrieve predictions for.",
                        "name": "watchlist_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/WatchlistPredictionsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/earnings": {
            "get": {
                "description": "Retrieves earnings data for the upcoming week from the cache.",
                "tags": [
                    "events"
                ],
                "summary": "Get earnings data",
                "operationId": "getEarningsNextWeek",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EarningsResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/entity-holdings": {
            "get": {
                "description": "Retrieves holdings data for a specific entity, with optional filtering by ticker symbol and date range.\nReturns enriched holdings data including fund names, entity names, and ticker symbols.",
                "tags": [
                    "holdings"
                ],
                "summary": "Get entity holdings",
                "operationId": "getEntityHoldings",
                "parameters": [
                    {
                        "description": "Entity ID to fetch holdings for",
                        "name": "entity_id",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Ticker symbol to filter holdings for",
                        "name": "ticker",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "start",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "End date in YYYY-MM-DD format",
                        "name": "end",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Maximum number of records to return",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EntityHoldingsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/estimates/ltg/{ticker}": {
            "get": {
                "description": "Retrieves Long-Term Growth (LTG) estimate data for a given stock ticker.\nAn optional cutOff date can be provided to retrieve data as of that date.",
                "tags": [
                    "estimates"
                ],
                "summary": "Get LTG estimates",
                "operationId": "getLongTermGrowthEstimate",
                "parameters": [
                    {
                        "description": "Stock ticker symbol.",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional cut-off date (e.g., 'YYYY-MM-DD') to retrieve estimates as of a specific date.",
                        "name": "cutOff",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EstimatesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/estimates/metrics/{ticker}/{period}": {
            "get": {
                "description": "Retrieves the most recent estimate metrics (e.g., EPS, Sales) for a given stock ticker,\nfor a specified period type (ANN, QTR, or BOTH).\nAn optional cutOff date can be provided to retrieve data as of that date.",
                "tags": [
                    "estimates"
                ],
                "summary": "Get estimate metrics",
                "operationId": "getEstimatesMetrics",
                "parameters": [
                    {
                        "description": "Stock ticker symbol.",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Reporting period type.",
                        "name": "period",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ANN",
                                "QTR",
                                "BOTH"
                            ]
                        }
                    },
                    {
                        "description": "Optional cut-off date (e.g., 'YYYY-MM-DD') to retrieve estimates as of a specific date.",
                        "name": "cutOff",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EstimatesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/estimates/pricetarget/{ticker}": {
            "get": {
                "description": "Retrieves price target estimate data for a given stock ticker.\nAn optional cutOff date can be provided to retrieve data as of that date.",
                "tags": [
                    "estimates"
                ],
                "summary": "Get price target estimates",
                "operationId": "getPriceTargetEstimate",
                "parameters": [
                    {
                        "description": "Stock ticker symbol.",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Optional cut-off date (e.g., 'YYYY-MM-DD') to retrieve estimates as of a specific date.",
                        "name": "cutOff",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/EstimatesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/fear-greed": {
            "get": {
                "description": "Retrieves the historical Fear & Greed Index data.",
                "tags": [
                    "fear-greed"
                ],
                "summary": "Get the Fear & Greed Index",
                "operationId": "getFearGreedIndex",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FearGreedIndexResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/fund-holdings": {
            "get": {
                "description": "Retrieves holdings data for a specific fund, with optional filtering by ticker symbol and date range.\nReturns enriched holdings data including fund names, entity names, and ticker symbols.",
                "tags": [
                    "holdings"
                ],
                "summary": "Get fund holdings",
                "operationId": "getFundHoldings",
                "parameters": [
                    {
                        "description": "Fund ID to fetch holdings for",
                        "name": "fund_id",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Ticker symbol to filter holdings for",
                        "name": "ticker",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "start",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "End date in YYYY-MM-DD format",
                        "name": "end",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "Maximum number of records to return",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FundHoldingsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/fundamentals/range": {
            "get": {
                "description": "Balance-sheet, cash-flow, income & ratios for many tickers across a year span.",
                "tags": [
                    "fundamentals"
                ],
                "summary": "Get financials for multiple tickers across several years",
                "operationId": "getFinancialsMultiRange",
                "parameters": [
                    {
                        "description": "The tickers to fetch",
                        "name": "tickers",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The start year",
                        "name": "start_year",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end year",
                        "name": "end_year",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FinancialsRangeResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/fundamentals/{ticker}/period/{year}/{period}": {
            "get": {
                "description": "Balance-sheet, cash-flow, income & ratios for one specific year & reporting period (FY, Q1‒Q4).",
                "tags": [
                    "fundamentals"
                ],
                "summary": "Get financials for a single ticker for a specific period",
                "operationId": "getFinancialsPeriod",
                "parameters": [
                    {
                        "description": "The ticker to fetch",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The year",
                        "name": "year",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The period",
                        "name": "period",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FinancialsPeriodResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/fundamentals/{ticker}/range/{start_year}/{end_year}": {
            "get": {
                "description": "Balance-sheet, cash-flow, income & ratios for one ticker across a year span.",
                "tags": [
                    "fundamentals"
                ],
                "summary": "Get financials for a single ticker across several years",
                "operationId": "getFinancialsSingleRange",
                "parameters": [
                    {
                        "description": "The ticker to fetch",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The start year",
                        "name": "start_year",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end year",
                        "name": "end_year",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FinancialsRangeResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/futures-data": {
            "get": {
                "description": "Retrieves futures data for a specified ticker symbol within a given date range.",
                "tags": [
                    "futures"
                ],
                "summary": "Get futures data",
                "operationId": "getFuturesData",
                "parameters": [
                    {
                        "description": "Ticker symbol for the futures data.",
                        "name": "ticker",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date for the data (YYYY-MM-DD).",
                        "name": "start",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for the data (YYYY-MM-DD).",
                        "name": "end",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FuturesDataResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/g7-events": {
            "get": {
                "description": "Retrieves G7 events data for the upcoming week from the cache.",
                "tags": [
                    "events"
                ],
                "summary": "Get G7 events data",
                "operationId": "getG7EventsNextWeek",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/G7EventsResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/historical-data/{ticker}": {
            "get": {
                "description": "This will retrieve historical price data for the specified stock symbol, aggregated by the given period,\nwithin the specified start and end dates.",
                "tags": [
                    "historical-data"
                ],
                "summary": "Get historical prices",
                "operationId": "getHistoricalData",
                "parameters": [
                    {
                        "description": "The stock symbol",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The time period for aggregation (e.g., \"1m\", \"1h\", \"day\")",
                        "name": "period",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The start date for historical data (YYYY-MM-DD)",
                        "name": "start",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end date for historical data (YYYY-MM-DD)",
                        "name": "end",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/HistoricalDataResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/investor-search": {
            "get": {
                "description": "Returns up to the first 100 investors whose names start with the supplied prefix.",
                "tags": [
                    "investors"
                ],
                "summary": "Search investors",
                "operationId": "searchInvestors",
                "parameters": [
                    {
                        "description": "The prefix to search for",
                        "name": "prefix",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/InvestorSearchResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/ipos": {
            "get": {
                "description": "Retrieves IPO data for the upcoming week from the cache.",
                "tags": [
                    "events"
                ],
                "summary": "Get IPO data",
                "operationId": "getIPOsNextWeek",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/IPOsResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/market-status": {
            "get": {
                "description": "Fetches the current market status from Polygon.io and returns whether the market is considered open.",
                "tags": [
                    "market-status"
                ],
                "summary": "Get market status",
                "operationId": "getMarketStatus",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MarketStatusResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/markets/top-stocks/{type}": {
            "get": {
                "description": "Retrieves the top market stocks data based on the specified type.\nThe type parameter determines whether to fetch top gainers, losers, or most active stocks.",
                "tags": [
                    "markets"
                ],
                "summary": "Get top market stocks",
                "operationId": "fetchTopMarketStocks",
                "parameters": [
                    {
                        "description": "The type of stocks to fetch (gainers, losers, or active)",
                        "name": "type",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "gainers",
                                "losers",
                                "active"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TopMarketStocksResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/marketsnapshot": {
            "get": {
                "description": "This will retrieve the market snapshot for all available tickers\nwith their current price and today's change",
                "tags": [
                    "markets"
                ],
                "summary": "Get current market snapshot data",
                "operationId": "getMarketSnapshot",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/MarketSnapshotResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/news": {
            "get": {
                "description": "Retrieves news articles based on specified filter criteria such as date range,\nticker symbol, search text, sentiment score, market impact, and  .\nSupports pagination via the limit parameter.",
                "tags": [
                    "news"
                ],
                "summary": "Get news articles",
                "operationId": "getNewsArticles",
                "parameters": [
                    {
                        "description": "Date range \"1d, 7d, 30d, 90d\". Defaults to 7d.",
                        "name": "date_range",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Page number. Defaults to 0.",
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NewsResponse"
                    },
                    "204": {
                        "$ref": "#/components/responses/EmptyResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/news/sentiment/{ticker}": {
            "get": {
                "tags": [
                    "news"
                ],
                "summary": "Get sentiment scores for a ticker.",
                "operationId": "getTickerSentiment30D",
                "parameters": [
                    {
                        "description": "Stock ticker symbol (e.g., AAPL, TSLA)",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TickerSentimentResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/news/{id}": {
            "get": {
                "description": "Retrieves a news article by its unique ID.",
                "tags": [
                    "news"
                ],
                "summary": "Get a news article by ID.",
                "operationId": "getNewsArticle",
                "parameters": [
                    {
                        "description": "Unique ID of the news article",
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/NewsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/options/chain/{ticker}": {
            "get": {
                "description": "Retrieves comprehensive options chain data for a given underlying ticker symbol.\nWhen calculate_put_call_ratio is set to true and contract_type is 'both', the response\nwill include put/call ratio analysis which is useful for market sentiment analysis.",
                "tags": [
                    "options"
                ],
                "summary": "Get options chain",
                "operationId": "getOptionsChain",
                "parameters": [
                    {
                        "description": "The underlying ticker symbol (e.g., AAPL, TSLA, SPY)",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date for options expiration range (YYYY-MM-DD format)",
                        "name": "start_date",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for options expiration range (YYYY-MM-DD format)",
                        "name": "end_date",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Type of contracts to return",
                        "name": "contract_type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "call",
                                "put",
                                "both"
                            ],
                            "default": "both"
                        }
                    },
                    {
                        "description": "Money status filter",
                        "name": "money_status",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ITM",
                                "OTM",
                                "ATM",
                                "ALL"
                            ],
                            "default": "ALL"
                        }
                    },
                    {
                        "description": "Whether to calculate put/call ratio",
                        "name": "calculate_put_call_ratio",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "description": "Minimum strike price filter",
                        "name": "min_strike_price",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum strike price filter",
                        "name": "max_strike_price",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum break-even price filter",
                        "name": "min_break_even_price",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum break-even price filter",
                        "name": "max_break_even_price",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum current option price filter",
                        "name": "min_current_price",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum current option price filter",
                        "name": "max_current_price",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum price change filter",
                        "name": "min_price_change",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum price change filter",
                        "name": "max_price_change",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum price change percentage filter",
                        "name": "min_price_change_percentage",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum price change percentage filter",
                        "name": "max_price_change_percentage",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum delta (price sensitivity) filter",
                        "name": "min_delta",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum delta (price sensitivity) filter",
                        "name": "max_delta",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum gamma (delta sensitivity) filter",
                        "name": "min_gamma",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum gamma (delta sensitivity) filter",
                        "name": "max_gamma",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum theta (time decay) filter",
                        "name": "min_theta",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum theta (time decay) filter",
                        "name": "max_theta",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum vega (volatility sensitivity) filter",
                        "name": "min_vega",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum vega (volatility sensitivity) filter",
                        "name": "max_vega",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum open interest filter",
                        "name": "min_open_interest",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Maximum open interest filter",
                        "name": "max_open_interest",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Minimum volume filter",
                        "name": "min_volume",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum volume filter",
                        "name": "max_volume",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Minimum implied volatility filter",
                        "name": "min_implied_vol",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "description": "Maximum implied volatility filter",
                        "name": "max_implied_vol",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/OptionsChainResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/options/filter-ranges/{ticker}": {
            "get": {
                "description": "Returns the minimum and maximum values for all filterable fields in the options chain data.",
                "tags": [
                    "options"
                ],
                "summary": "Get options filter ranges",
                "operationId": "getOptionsFilterRanges",
                "parameters": [
                    {
                        "description": "The underlying ticker symbol (e.g., AAPL, TSLA, SPY)",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date for options expiration range (YYYY-MM-DD format)",
                        "name": "start_date",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for options expiration range (YYYY-MM-DD format)",
                        "name": "end_date",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/OptionsFilterRangesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/options/historical/{ticker}": {
            "get": {
                "description": "Retrieves historical aggregate price data (OHLCV bars) for a specific options contract.\nBoth start_date and end_date are required parameters and should be provided in YYYY-MM-DD format.",
                "tags": [
                    "options"
                ],
                "summary": "Get historical options data",
                "operationId": "getHistoricalOptionsData",
                "parameters": [
                    {
                        "description": "The options contract ticker (e.g., O:AAPL240119C00150000)",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Start date for historical data (YYYY-MM-DD format)",
                        "name": "start_date",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "End date for historical data (YYYY-MM-DD format)",
                        "name": "end_date",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Time interval for aggregation",
                        "name": "interval",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "minute",
                                "hour",
                                "day",
                                "week",
                                "month",
                                "quarter",
                                "year"
                            ],
                            "default": "day"
                        }
                    },
                    {
                        "description": "Time multiplier for the interval (e.g., 5 for 5-minute bars)",
                        "name": "time_break",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/HistoricalOptionsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/price-forecasts": {
            "get": {
                "description": "Returns a map where each key is a ticker symbol and the value is an array of forecast data points.",
                "tags": [
                    "forecasts"
                ],
                "summary": "Get price forecasts",
                "operationId": "getPriceForecasts",
                "parameters": [
                    {
                        "description": "The number of days to forecast (1–10)",
                        "name": "forecast_horizon",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 4
                        }
                    },
                    {
                        "description": "Comma-separated list of stock ticker symbols",
                        "name": "tickers",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "AAPL,TSLA,AMZN,NVDA,MSFT,GOOG"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/PriceForecastResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/risk-analysis-score": {
            "get": {
                "description": "Retrieves the historical Risk Analysis Score data.",
                "tags": [
                    "risk-analysis"
                ],
                "summary": "Get the Risk Analysis Score",
                "operationId": "getRiskAnalysisScore",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/RiskAnalysisScoreResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/search/institutional-holdings/entities": {
            "get": {
                "description": "Searches for entities based on a query term, field, mode, and limit.",
                "tags": [
                    "search"
                ],
                "summary": "Search for entities",
                "operationId": "searchEntitiesParams",
                "parameters": [
                    {
                        "description": "Search term",
                        "name": "q",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Field to search in (e.g., entity_proper_name)",
                        "name": "field",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "entity_proper_name"
                        }
                    },
                    {
                        "description": "Search mode (e.g., fuzzy, exact)",
                        "name": "mode",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "fuzzy"
                        }
                    },
                    {
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SearchResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/search/institutional-holdings/funds": {
            "get": {
                "description": "Searches for funds based on a query term, field, mode, and limit.",
                "tags": [
                    "search"
                ],
                "summary": "Search for funds",
                "operationId": "searchFundsParams",
                "parameters": [
                    {
                        "description": "Search term",
                        "name": "q",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Field to search in (e.g., entity_proper_name)",
                        "name": "field",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "entity_proper_name"
                        }
                    },
                    {
                        "description": "Search mode (e.g., fuzzy, exact)",
                        "name": "mode",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "fuzzy"
                        }
                    },
                    {
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SearchResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/search/institutional-holdings/stock": {
            "get": {
                "description": "Searches for Fsyms (stocks) based on a query term, field, mode, and limit.",
                "tags": [
                    "search"
                ],
                "summary": "Search for stocks",
                "operationId": "searchFsymsParams",
                "parameters": [
                    {
                        "description": "Search term",
                        "name": "q",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Field to search in (e.g., entity_proper_name)",
                        "name": "field",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "entity_proper_name"
                        }
                    },
                    {
                        "description": "Search mode (e.g., fuzzy, exact)",
                        "name": "mode",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "fuzzy"
                        }
                    },
                    {
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/SearchResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/stock-screener/screen": {
            "post": {
                "description": "Filters stocks based on the provided financial criteria and returns\nmatching ticker symbols. The screening is performed against historical\nfinancial data up to the specified cutoff date.",
                "tags": [
                    "stock-screener"
                ],
                "summary": "Screen stocks based on financial criteria.",
                "operationId": "screenStocks",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ScreenRequest"
                            }
                        }
                    },
                    "description": "Request body for stock screening",
                    "required": true,
                    "x-go-name": "Body"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/ScreenResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/technical-analysis/fibonacci-carmilia/{symbol}": {
            "get": {
                "description": "This will calculate Fibonacci retracement levels and Camarilla pivot points for the specified stock symbol",
                "tags": [
                    "technical-analysis"
                ],
                "summary": "Get Fibonacci levels and Camarilla points",
                "operationId": "getFibonacciCarmiliaLevels",
                "parameters": [
                    {
                        "description": "The stock symbol to analyze",
                        "name": "symbol",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FibonacciCarmiliaResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/ticker/{ticker}/profile": {
            "get": {
                "description": "Returns the JSON profile for the specified symbol.",
                "tags": [
                    "tickers"
                ],
                "summary": "Retrieve ticker profile data",
                "operationId": "GetTickerProfileData",
                "parameters": [
                    {
                        "description": "The stock ticker symbol (e.g., AAPL).",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TickerProfileResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/tickers": {
            "get": {
                "description": "Returns the full list of symbols from cache or Bigtable.",
                "tags": [
                    "tickers"
                ],
                "summary": "List all tracked tickers",
                "operationId": "GetTickersList",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TickersListResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/tickers-with-names": {
            "get": {
                "description": "Returns all tracked tickers and their profiles.",
                "tags": [
                    "tickers"
                ],
                "summary": "List tickers with their names",
                "operationId": "GetTickersListWithNames",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TickersListWithNamesResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/tickertape": {
            "get": {
                "description": "This will retrieve the current market data for a predefined list of popular stock tickers",
                "tags": [
                    "tickertape"
                ],
                "summary": "Get data on popular stocks",
                "operationId": "getTickertapeData",
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TickertapeResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/trades/{symbol}": {
            "get": {
                "description": "This will retrieve recent trades data for the specified stock symbol from Redis\nusing the TICKER_TRADES sorted set key pattern. Each trade is decompressed if stored as gzip.\nReturns an array of trade objects with pricing, volume, and market data.",
                "tags": [
                    "trades"
                ],
                "summary": "Get trades data",
                "operationId": "getTradesData",
                "parameters": [
                    {
                        "description": "The stock symbol to get trades for",
                        "name": "symbol",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Maximum number of trades to return (default: 100)",
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 100
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TradesDataResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/treasury-rates": {
            "get": {
                "description": "Retrieves treasury rates data from Bigtable for the specified date range.\nIf no dates are provided, returns data for the current date.",
                "tags": [
                    "treasury-rates"
                ],
                "summary": "Get treasury rates",
                "operationId": "getTreasuryRates",
                "parameters": [
                    {
                        "description": "Start date for the range (YYYY-MM-DD format)",
                        "name": "start_date",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "description": "End date for the range (YYYY-MM-DD format)",
                        "name": "end_date",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "date"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/TreasuryRatesResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/volume-footprint/{symbol}": {
            "get": {
                "description": "This endpoint provides detailed volume footprint analysis for all available trades including:\nPrice action analysis (OHLC, VWAP)\nVolume distribution by price level\nOrder flow imbalances between buy and sell orders\nVolume clusters indicating high activity zones\nAbsorption signals for potential exhaustion points\nPoint of Control (POC) - price level with highest volume\nValue Area High/Low for 70% of traded volume\nDelta percentage to gauge buying vs selling pressure\n\nThe analysis is based on all available trade data from Redis and calculates comprehensive\nmarket microstructure metrics useful for understanding market dynamics.",
                "tags": [
                    "volume-footprint"
                ],
                "summary": "Get volume footprint analysis",
                "operationId": "getVolumeFootprint",
                "parameters": [
                    {
                        "name": "symbol",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/FootprintResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/watchlist": {
            "post": {
                "description": "Retrieves data for a specified list of stock tickers within a given date range.\nThe request parameters are passed in the request body.",
                "tags": [
                    "watchlist"
                ],
                "summary": "Fetch watchlist data",
                "operationId": "fetchWatchlistData",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FetchWatchlistDataRequest"
                            }
                        }
                    },
                    "required": true,
                    "x-go-name": "Body"
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/WatchlistDataResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        },
        "/{ticker}/stock-splits": {
            "get": {
                "description": "Retrieves the stock split history for a given ticker symbol from Bigtable.",
                "tags": [
                    "stock-splits"
                ],
                "summary": "Get stock split history",
                "operationId": "getStockSplits",
                "parameters": [
                    {
                        "description": "The stock ticker symbol (e.g., AAPL).",
                        "name": "ticker",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/StockSplitsResponse"
                    },
                    "400": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/ErrorResponse"
                    },
                    "500": {
                        "$ref": "#/components/responses/ErrorResponse"
                    }
                }
            }
        }
    },
    "servers": [
        {
            "url": "https://api.go.useallmind.ai"
        }
    ],
    "components": {
        "responses": {
            "APIKeyResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/APIKeyResponse"
                        }
                    }
                }
            },
            "ChatHistoryResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ChatHistory"
                        }
                    }
                }
            },
            "CreateAPIKeyResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CreateAPIKeyResponse"
                        }
                    }
                }
            },
            "CurrentPriceResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CurrentPrice"
                        }
                    }
                }
            },
            "DailyDarkpoolTrendResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DarkpoolMetrics"
                        }
                    }
                }
            },
            "DarkpoolDailySummaryResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DarkpoolDailySummaryResponse"
                        }
                    }
                }
            },
            "DarkpoolTradeResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/DarkpoolTrade"
                            }
                        }
                    }
                }
            },
            "DarkpoolTrendsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/DarkpoolTrendsResponse"
                        }
                    }
                }
            },
            "DashboardWatchlistResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "DeleteAPIKeyResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "x-go-name": "Message",
                                    "example": "API key deleted successfully"
                                }
                            }
                        }
                    }
                }
            },
            "EarningsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/EarningsData"
                            }
                        }
                    }
                }
            },
            "EmptyResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/EmptyResponse"
                        }
                    }
                }
            },
            "EntityHoldingsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/EntityHoldingResponse"
                            }
                        }
                    }
                }
            },
            "ErrorResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorResponse"
                        }
                    }
                }
            },
            "EstimatesResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/CombinedOutput"
                            }
                        }
                    }
                }
            },
            "ExpirationDatesResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ExpirationDates"
                        }
                    }
                }
            },
            "FearGreedIndexResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/FearGreedRecord"
                            }
                        }
                    }
                }
            },
            "FibonacciCarmiliaResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/AnalysisResults"
                        }
                    }
                }
            },
            "FinancialsPeriodResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/FinancialsPeriodData"
                        }
                    }
                }
            },
            "FinancialsRangeResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/FinancialsRangeData"
                        }
                    }
                }
            },
            "FootprintResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Footprint"
                        }
                    }
                }
            },
            "FundHoldingsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/FundHoldingResponse"
                            }
                        }
                    }
                }
            },
            "FuturesDataResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/FuturesRowData"
                            }
                        }
                    }
                }
            },
            "G7EventsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/G7EventsData"
                            }
                        }
                    }
                }
            },
            "HistoricalDataResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {}
                    }
                }
            },
            "HistoricalOptionsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/HistoricalOptionsData"
                        }
                    }
                }
            },
            "IPOsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/IPOData"
                            }
                        }
                    }
                }
            },
            "InvestorSearchResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/HolderInfo"
                            }
                        }
                    }
                }
            },
            "MarketSnapshotResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/MarketSnapshotItem"
                            }
                        }
                    }
                }
            },
            "MarketStatusResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MarketStatus"
                        }
                    }
                }
            },
            "MetricsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "The response data",
                                    "x-go-name": "Data"
                                },
                                "success": {
                                    "description": "Indicates if the request was successful",
                                    "type": "boolean",
                                    "x-go-name": "Success"
                                }
                            }
                        }
                    }
                }
            },
            "NewsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/SkeletonNewsArticle"
                            }
                        }
                    }
                }
            },
            "OptionsChainResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/OptionsChain"
                        }
                    }
                }
            },
            "OptionsFilterRangesResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/OptionsFilterRanges"
                        }
                    }
                }
            },
            "PriceForecastResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TickerForecasts"
                        }
                    }
                }
            },
            "RiskAnalysisScoreResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RiskAnalysisScores"
                        }
                    }
                }
            },
            "ScreenResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ScreenResponse"
                        }
                    }
                }
            },
            "SearchResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/SearchResponse"
                        }
                    }
                }
            },
            "StockSplitsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/StockSplitsData"
                            }
                        }
                    }
                }
            },
            "TickerProfileResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TickerProfile"
                        }
                    }
                }
            },
            "TickerSentimentResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/MultiPeriodSentimentMetrics"
                        }
                    }
                }
            },
            "TickersListResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "TickersListWithNamesResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "TickertapeResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/components/schemas/StockData"
                            }
                        }
                    }
                }
            },
            "TopMarketStocksResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/SymbolOhlcvStats"
                            }
                        }
                    }
                }
            },
            "TradesDataResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TradesDataResponse"
                        }
                    }
                }
            },
            "TreasuryRatesResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/TreasuryRatesData"
                            }
                        }
                    }
                }
            },
            "WatchlistDataResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/WatchlistData"
                        }
                    }
                }
            },
            "WatchlistPredictionsResponse": {
                "description": "",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TickerForecasts"
                        }
                    }
                }
            }
        },
        "schemas": {
            "APIKey": {
                "description": "APIKey represents an API key with its metadata",
                "type": "object",
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "CreatedAt",
                        "example": "2021-01-01T00:00:00Z"
                    },
                    "id": {
                        "type": "string",
                        "x-go-name": "ID",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "key": {
                        "type": "string",
                        "x-go-name": "Key",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "name": {
                        "type": "string",
                        "x-go-name": "Name",
                        "example": "My API Key"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-go-name": "Permissions",
                        "example": [
                            "read",
                            "write"
                        ]
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "APIKeyResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/APIKey"
                        },
                        "x-go-name": "Data"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "AggregatedData": {
                "type": "object",
                "title": "AggregatedData represents aggregated historical data.",
                "properties": {
                    "close": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Close",
                        "example": 201.7
                    },
                    "high": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "High",
                        "example": 202.13
                    },
                    "low": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Low",
                        "example": 200.12
                    },
                    "open": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Open",
                        "example": 200.28
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "AAPL"
                    },
                    "transactions": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Transactions",
                        "example": 501431
                    },
                    "volume": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Volume",
                        "example": 35423294
                    },
                    "vwap": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "VolumeWeighted",
                        "example": 201.2063
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "Analysis": {
                "type": "object",
                "properties": {
                    "current_events_analysis": {
                        "type": "string",
                        "x-go-name": "CurrentEventsAnalysis",
                        "example": "The current events landscape for 2025-06-18 is dominated by high-impact communications from the Federal Reserve, ..."
                    },
                    "news_analysis": {
                        "type": "string",
                        "x-go-name": "NewsAnalysis",
                        "example": "The news summary for 2025-06-18 underscores a market environment characterized by uncertainty and a high potential for volatility, primarily driven by the scheduled FOMC monetary policy decision and Chair Powell's press conference..."
                    },
                    "overall_risk_analysis": {
                        "type": "string",
                        "x-go-name": "OverallRiskAnalysis",
                        "example": "The overall market risk for 2025-06-18 is assessed as 75, placing it in the 'High Risk / Volatile' category..."
                    },
                    "price_data_analysis": {
                        "type": "string",
                        "x-go-name": "PriceDataAnalysis",
                        "example": "No explicit price data (Dark Pools, Options, Treasuries, Tickers) was provided for 2025-06-18..."
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "AnalysisResults": {
                "description": "AnalysisResults contains the results of Fibonacci and Camarilla analysis",
                "type": "object",
                "properties": {
                    "camarilla_levels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CamarillaLevel"
                        },
                        "x-go-name": "CamarillaLevels"
                    },
                    "fibonacci_levels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FibonacciRetractmentLevel"
                        },
                        "x-go-name": "FibonacciLevels"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "CamarillaLevel": {
                "description": "CamarillaLevel stores a Camarilla pivot point",
                "type": "object",
                "properties": {
                    "level": {
                        "type": "string",
                        "x-go-name": "Level",
                        "example": "H1"
                    },
                    "value": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Value",
                        "example": 195.496875
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ChatHistory": {
                "type": "object",
                "properties": {
                    "chatName": {
                        "type": "string",
                        "x-go-name": "ChatName",
                        "example": "My Chat"
                    },
                    "history": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChatMessage"
                        },
                        "x-go-name": "History"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ChatMessage": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "x-go-name": "Content",
                        "example": "Hello, how are you?"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-go-name": "Files",
                        "example": [
                            "file1.txt",
                            "file2.txt"
                        ]
                    },
                    "role": {
                        "type": "string",
                        "x-go-name": "Role",
                        "example": "user"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "CombinedOutput": {
                "type": "object",
                "properties": {
                    "annual": {
                        "$ref": "#/components/schemas/PeriodBlock"
                    },
                    "quarterly": {
                        "$ref": "#/components/schemas/PeriodBlock"
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "CreateAPIKeyResponse": {
                "type": "object",
                "properties": {
                    "api_key": {
                        "type": "string",
                        "x-go-name": "APIKey",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "CreatedAt",
                        "example": "2021-01-01T00:00:00Z"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "CurrentDayInfo": {
                "type": "object",
                "properties": {
                    "close": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Close"
                    },
                    "high": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "High"
                    },
                    "low": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Low"
                    },
                    "open": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Open"
                    },
                    "todays_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TodaysChange"
                    },
                    "todays_change_perc": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TodaysChangePerc"
                    },
                    "volume": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Volume"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "CurrentPrice": {
                "type": "object",
                "properties": {
                    "ask_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AskPrice",
                        "example": 195.74
                    },
                    "ask_size": {
                        "type": "integer",
                        "format": "uint32",
                        "x-go-name": "AskSize",
                        "example": 100
                    },
                    "bid_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "BidPrice",
                        "example": 195.72
                    },
                    "bid_size": {
                        "type": "integer",
                        "format": "uint32",
                        "x-go-name": "BidSize",
                        "example": 200
                    },
                    "change_percentage": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ChangePercentage",
                        "example": 0.0029
                    },
                    "dollar_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DollarChange",
                        "example": 0.56
                    },
                    "previous_close": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PreviousClose",
                        "example": 195.16
                    },
                    "price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Price",
                        "example": 195.72
                    },
                    "sequence": {
                        "type": "integer",
                        "format": "uint32",
                        "x-go-name": "Sequence",
                        "example": 164525600
                    },
                    "side": {
                        "type": "string",
                        "x-go-name": "Side",
                        "example": "Bid"
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "AAPL"
                    },
                    "timestamp": {
                        "type": "string",
                        "x-go-name": "Timestamp",
                        "example": "2025-06-18 14:54:20"
                    },
                    "trade_size": {
                        "type": "integer",
                        "format": "uint32",
                        "x-go-name": "TradeSize",
                        "example": 200
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DailyRowData": {
                "description": "DailyRowData represents daily historical price data from Financial Modeling Prep API",
                "type": "object",
                "properties": {
                    "close": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Close"
                    },
                    "high": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "High"
                    },
                    "low": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Low"
                    },
                    "open": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Open"
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol"
                    },
                    "ts_event": {
                        "type": "string",
                        "x-go-name": "TsEvent"
                    },
                    "volume": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Volume"
                    },
                    "vwap": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "VWAP"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DailyVolume": {
                "description": "DailyVolume represents daily volume data",
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "x-go-name": "Date"
                    },
                    "volume": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Volume"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DarkpoolDailySummary": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "Date",
                        "example": "2025-05-20T00:00:00Z"
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "T"
                    },
                    "total_daily_value": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalDailyValue",
                        "example": 314491780.3681218
                    },
                    "total_daily_volume": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "TotalDailyVolume",
                        "example": 11273982
                    },
                    "trade_count": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "TradeCount",
                        "example": 55535
                    },
                    "weighted_average_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "WeightedAveragePrice",
                        "example": 27.895359454017385
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DarkpoolDailySummaryResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "in: body",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DarkpoolDailySummary"
                        },
                        "x-go-name": "Data"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DarkpoolMetrics": {
                "description": "DarkpoolMetrics represents the calculated metrics",
                "type": "object",
                "properties": {
                    "absolute_growth": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "AbsoluteGrowth"
                    },
                    "daily_volume": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DailyVolume"
                        },
                        "x-go-name": "DailyVolume"
                    },
                    "first_day": {
                        "type": "string",
                        "x-go-name": "FirstDay"
                    },
                    "growth_day_over_day": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GrowthData"
                        },
                        "x-go-name": "GrowthDayOverDay"
                    },
                    "last_day": {
                        "type": "string",
                        "x-go-name": "LastDay"
                    },
                    "message": {
                        "type": "string",
                        "x-go-name": "Message"
                    },
                    "overall_growth_percent": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "OverallGrowthPercent"
                    },
                    "overall_trend": {
                        "type": "string",
                        "x-go-name": "OverallTrend"
                    },
                    "status": {
                        "type": "string",
                        "x-go-name": "Status"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DarkpoolTrade": {
                "type": "object",
                "title": "DarkpoolTrade represents a dark pool trade data record.",
                "properties": {
                    "current_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "CurrentPrice",
                        "example": 688.04
                    },
                    "flags": {
                        "type": "string",
                        "x-go-name": "Flags",
                        "example": "LAST"
                    },
                    "movement_since_trade": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "MovementSinceTrade",
                        "example": -0.20267589511045483
                    },
                    "price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Price",
                        "example": 689.4373232661552
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Size",
                        "example": 24065
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "META"
                    },
                    "time_of_trade": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "TimeOfTrade",
                        "example": "2025-06-20T12:46:12.736331719-04:00"
                    },
                    "trade_value": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TradeValue",
                        "example": 16591309.184400026
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DarkpoolTrend": {
                "type": "object",
                "required": [
                    "ticker",
                    "total_volume",
                    "prev_volume",
                    "total_dollar_volume",
                    "prev_dollar_volume",
                    "darkpool_ratio",
                    "absolute_volume_change",
                    "relative_volume_change",
                    "record_date",
                    "prev_record_date",
                    "trend"
                ],
                "properties": {
                    "absolute_volume_change": {
                        "description": "The percentage change in volume from previous date",
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "AbsoluteVolumeChange",
                        "example": 23
                    },
                    "darkpool_ratio": {
                        "description": "The darkpool/total volume ratio",
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DarkpoolRatio",
                        "example": 0.123456789
                    },
                    "prev_dollar_volume": {
                        "description": "The previous day's total dollar volume",
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PrevDollarVolume",
                        "example": 1000000
                    },
                    "prev_record_date": {
                        "description": "The date of the previous record",
                        "type": "string",
                        "x-go-name": "PrevRecordDate",
                        "example": "2023-03-11"
                    },
                    "prev_volume": {
                        "description": "The previous day's total volume",
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "PrevVolume",
                        "example": 1000000
                    },
                    "record_date": {
                        "description": "The date of the record in YYYY-MM-DD format",
                        "type": "string",
                        "x-go-name": "RecordDate",
                        "example": "2023-03-12"
                    },
                    "relative_volume_change": {
                        "description": "The percentage change in volume from previous date",
                        "type": "number",
                        "format": "double",
                        "x-go-name": "RelativeVolumeChange",
                        "example": 23.45
                    },
                    "ticker": {
                        "description": "The stock ticker symbol",
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "AAPL"
                    },
                    "total_dollar_volume": {
                        "description": "The total dollar volume of darkpool trades",
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalDollarVolume",
                        "example": 1234567.89
                    },
                    "total_volume": {
                        "description": "The total volume of darkpool trades for this ticker on this date",
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "TotalVolume",
                        "example": 1234567
                    },
                    "trend": {
                        "description": "Whether the volume trend is up, down, or flat",
                        "type": "string",
                        "x-go-name": "Trend",
                        "example": "up"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "DarkpoolTrendsResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DarkpoolTrend"
                        },
                        "x-go-name": "Data"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "EarningsData": {
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "x-go-name": "Date",
                        "example": "2025-06-24"
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "CUK"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "EmptyResponse": {
                "type": "object",
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "EntityHoldingResponse": {
                "type": "object",
                "properties": {
                    "adj_holding": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AdjHolding",
                        "example": 1000000.5
                    },
                    "adj_mv": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AdjMV",
                        "example": 150000000.75
                    },
                    "entity_name": {
                        "type": "string",
                        "x-go-name": "EntityName",
                        "example": "\"BlackRock Inc.\""
                    },
                    "report_date": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "ReportDate",
                        "example": "\"2024-03-15T00:00:00Z\""
                    },
                    "reported_holding": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ReportedHolding",
                        "example": 1000000
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "\"AAPL\""
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "x-go-name": "Message"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ExpirationDates": {
                "type": "object",
                "properties": {
                    "dates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-go-name": "Dates"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ExtraInfo": {
                "type": "object",
                "properties": {
                    "highest_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "HighestPrice"
                    },
                    "lowest_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "LowestPrice"
                    },
                    "market_cap": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "MarketCap"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FearGreedRecord": {
                "type": "object",
                "properties": {
                    "average_put_call_option_ratio": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AveragePutCallOptionRatio",
                        "example": 0.727365952350784
                    },
                    "date": {
                        "type": "string",
                        "x-go-name": "Date",
                        "example": "2025-06-18"
                    },
                    "junk_bonds_vs_investment_bonds_spread": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "JunkBondsVsInvestmentBondsSpread",
                        "example": 1.41395557638261
                    },
                    "market_greed_level": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "MarketGreedLevel",
                        "example": 54.3714285714286
                    },
                    "market_returns_vs_bonds": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "MarketReturnsVsBonds",
                        "example": 0.9429439178541631
                    },
                    "market_sentiment": {
                        "type": "string",
                        "x-go-name": "MarketSentiment",
                        "example": "neutral"
                    },
                    "vix_volatility": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "VIXVolatility",
                        "example": 19.89
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FetchWatchlistDataRequest": {
                "type": "object",
                "required": [
                    "ticker_infos"
                ],
                "properties": {
                    "end_date": {
                        "description": "The end date for the data range (YYYY-MM-DD).\nin: body\nrequired: false (will use default if not provided)",
                        "type": "string",
                        "x-go-name": "EndDate"
                    },
                    "start_date": {
                        "description": "The start date for the data range (YYYY-MM-DD).\nin: body\nrequired: false (will use default if not provided)",
                        "type": "string",
                        "x-go-name": "StartDate"
                    },
                    "ticker_infos": {
                        "description": "A list of ticker symbols for which to fetch data.\nin: body",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TickerInfo"
                        },
                        "x-go-name": "TickerInfos"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FibonacciRetractmentLevel": {
                "description": "FibonacciRetractmentLevel stores a Fibonacci retracement level with its ratio and value",
                "type": "object",
                "properties": {
                    "ratio": {
                        "type": "string",
                        "x-go-name": "Ratio",
                        "example": "Fib_23.6%"
                    },
                    "value": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Value",
                        "example": 204.871
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FilterCriteria": {
                "type": "object",
                "required": [
                    "metric",
                    "operator",
                    "value"
                ],
                "properties": {
                    "metric": {
                        "description": "The financial metric to filter on (e.g., \"eps\", \"revenue\", \"current_ratio\")",
                        "type": "string",
                        "x-go-name": "Metric"
                    },
                    "operator": {
                        "description": "The comparison operator (>=, <=, ==, !=, >, <)",
                        "type": "string",
                        "x-go-name": "Operator"
                    },
                    "value": {
                        "description": "The value to compare against (can be number or string)",
                        "x-go-name": "Value"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FilterRange": {
                "description": "FilterRange represents min/max values for a numeric field",
                "type": "object",
                "properties": {
                    "max": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Max"
                    },
                    "min": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Min"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FinancialsPeriodData": {
                "type": "object",
                "additionalProperties": {},
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FinancialsRangeData": {
                "type": "object",
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {}
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "Footprint": {
                "description": "Volume Footprint",
                "type": "object",
                "properties": {
                    "buy_volume": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "BuyVolume",
                        "example": 19651096
                    },
                    "close_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ClosePrice",
                        "example": 195.44
                    },
                    "delta": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Delta",
                        "example": 533698
                    },
                    "delta_pct": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DeltaPct",
                        "example": 1.38
                    },
                    "high_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "HighPrice",
                        "example": 207.88
                    },
                    "imbalances": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Imbalance"
                        },
                        "x-go-name": "Imbalances"
                    },
                    "low_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "LowPrice",
                        "example": 195.07
                    },
                    "neutral_volume": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "NeutralVolume",
                        "example": 0
                    },
                    "open_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "OpenPrice",
                        "example": 198.74
                    },
                    "poc_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PocPrice",
                        "example": 200
                    },
                    "poc_volume": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "PocVolume",
                        "example": 193614
                    },
                    "sell_volume": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "SellVolume",
                        "example": 19117398
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "AAPL"
                    },
                    "value_area_high": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ValueAreaHigh",
                        "example": 205.1
                    },
                    "value_area_low": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ValueAreaLow",
                        "example": 196
                    },
                    "volume_clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VolumeCluster"
                        },
                        "x-go-name": "VolumeClusters"
                    },
                    "vwap": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "VWAP",
                        "example": 200.5829
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FormattedOptionsContract": {
                "type": "object",
                "title": "FormattedOptionsContract represents a flattened options contract structure.",
                "properties": {
                    "break_even_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "BreakEvenPrice",
                        "example": 196.025
                    },
                    "contract_fair_market_value": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ContractFairMarketValue",
                        "example": 193.722
                    },
                    "contract_type": {
                        "type": "string",
                        "x-go-name": "ContractType",
                        "example": "put"
                    },
                    "current_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "CurrentPrice",
                        "example": 193.722
                    },
                    "day_high": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DayHigh",
                        "example": 194.861
                    },
                    "day_low": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DayLow",
                        "example": 192.406
                    },
                    "day_open": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DayOpen",
                        "example": 194.196
                    },
                    "delta": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Delta",
                        "example": -0.972133
                    },
                    "expiration_date": {
                        "type": "string",
                        "x-go-name": "ExpirationDate",
                        "example": "2025-08-15"
                    },
                    "gamma": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Gamma",
                        "example": 0.001503
                    },
                    "implied_volatility": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ImpliedVolatility",
                        "example": 0.924785
                    },
                    "money_status": {
                        "type": "string",
                        "x-go-name": "MoneyStatus",
                        "example": "ITM"
                    },
                    "open_interest": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "OpenInterest",
                        "example": 0
                    },
                    "option_symbol": {
                        "type": "string",
                        "x-go-name": "OptionSymbol",
                        "example": "O:AAPL250815P00390000"
                    },
                    "previous_close": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PreviousClose",
                        "example": 177.85
                    },
                    "price_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PriceChange",
                        "example": 15.872
                    },
                    "price_change_percentage": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PriceChangePercentage",
                        "example": 8.924374
                    },
                    "strike_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "StrikePrice",
                        "example": 390
                    },
                    "theta": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Theta",
                        "example": -0.025231
                    },
                    "underlying_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "UnderlyingPrice",
                        "example": 196.41
                    },
                    "underlying_symbol": {
                        "type": "string",
                        "x-go-name": "UnderlyingSymbol",
                        "example": "AAPL"
                    },
                    "vega": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Vega",
                        "example": 0.040892
                    },
                    "volume": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Volume",
                        "example": 0
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FundHoldingResponse": {
                "type": "object",
                "properties": {
                    "adj_holding": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AdjHolding",
                        "example": 1000000.5
                    },
                    "adj_mv": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AdjMV",
                        "example": 150000000.75
                    },
                    "fund_name": {
                        "type": "string",
                        "x-go-name": "FundName",
                        "example": "\"Vanguard Total Stock Market Index Fund\""
                    },
                    "report_date": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "ReportDate",
                        "example": "\"2024-03-15T00:00:00Z\""
                    },
                    "reported_holding": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ReportedHolding",
                        "example": 1000000
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "\"AAPL\""
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "FuturesRowData": {
                "type": "object",
                "properties": {
                    "close": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Close",
                        "example": 195.72
                    },
                    "date": {
                        "type": "string",
                        "x-go-name": "Date",
                        "example": "2025-06-18"
                    },
                    "high": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "High",
                        "example": 207.88
                    },
                    "low": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Low",
                        "example": 195.44
                    },
                    "name": {
                        "type": "string",
                        "x-go-name": "Name",
                        "example": "Apple Inc."
                    },
                    "open": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Open",
                        "example": 195.72
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "AAPL"
                    },
                    "volume": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Volume",
                        "example": 19651096
                    },
                    "vwap": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "VWAP",
                        "example": 200.5829
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "G7EventsData": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "x-go-name": "Country",
                        "example": "CA"
                    },
                    "date": {
                        "type": "string",
                        "x-go-name": "Date",
                        "example": "2025-06-24"
                    },
                    "estimate": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Estimate",
                        "example": 0
                    },
                    "event": {
                        "type": "string",
                        "x-go-name": "Event",
                        "example": "CPI (May)"
                    },
                    "impact": {
                        "type": "string",
                        "x-go-name": "Impact",
                        "example": "High"
                    },
                    "previous": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Previous",
                        "example": 3.1
                    },
                    "unit": {
                        "type": "string",
                        "x-go-name": "Unit",
                        "example": "%"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "GrowthData": {
                "description": "GrowthData represents day-over-day growth data",
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "x-go-name": "Date"
                    },
                    "growth_percent": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "GrowthPercent"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "HistoricalOptionsData": {
                "type": "object",
                "properties": {
                    "adjusted": {
                        "type": "boolean",
                        "x-go-name": "Adjusted",
                        "example": true
                    },
                    "fetch_time": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "FetchTime",
                        "example": "2025-06-18T20:27:16.714618661Z"
                    },
                    "query_count": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "QueryCount",
                        "example": 13
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/AggregatedData"
                        },
                        "x-go-name": "Results",
                        "example": "["
                    },
                    "results_count": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "ResultsCount",
                        "example": 13
                    },
                    "status": {
                        "type": "string",
                        "x-go-name": "Status",
                        "example": "OK"
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "AAPL"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "HolderInfo": {
                "type": "object",
                "properties": {
                    "cik": {
                        "description": "CIK (Central Index Key) of the holder",
                        "type": "string",
                        "x-go-name": "CIK",
                        "example": "0000320193"
                    },
                    "name": {
                        "description": "Display name of the holder",
                        "type": "string",
                        "x-go-name": "Name",
                        "example": "BlackRock, Inc."
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "IPOData": {
                "type": "object",
                "properties": {
                    "actions": {
                        "type": "string",
                        "x-go-name": "Actions",
                        "example": "Expected"
                    },
                    "company": {
                        "type": "string",
                        "x-go-name": "Company",
                        "example": "Kandal M Venture Limited"
                    },
                    "date": {
                        "type": "string",
                        "x-go-name": "Date",
                        "example": "2025-06-24"
                    },
                    "exchange": {
                        "type": "string",
                        "x-go-name": "Exchange",
                        "example": "NASDAQ"
                    },
                    "marketCap": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "MarketCap",
                        "example": 11500000
                    },
                    "priceRange": {
                        "type": "string",
                        "x-go-name": "PriceRange",
                        "example": "4.00 - 5.00"
                    },
                    "shares": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Shares",
                        "example": 2000000
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "FMFC"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "Imbalance": {
                "type": "object",
                "properties": {
                    "buy_vol": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "BuyVol",
                        "example": 15859
                    },
                    "price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Price",
                        "example": 203.84
                    },
                    "ratio": {
                        "type": "string",
                        "x-go-name": "Ratio",
                        "example": "2.67"
                    },
                    "sell_vol": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "SellVol",
                        "example": 5947
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "MarketSnapshotItem": {
                "description": "MarketSnapshotItem represents a single ticker item in the market snapshot",
                "type": "object",
                "properties": {
                    "current_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "CurrentPrice",
                        "example": 19.27
                    },
                    "dollar_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DollarChange",
                        "example": 0.05000000000000071
                    },
                    "last_quote_ask_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "LastQuoteAskPrice",
                        "example": 19.3
                    },
                    "last_quote_ask_size": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "LastQuoteAskSize",
                        "example": 5
                    },
                    "last_quote_bid_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "LastQuoteBidPrice",
                        "example": 19.17
                    },
                    "last_quote_bid_size": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "LastQuoteBidSize",
                        "example": 5
                    },
                    "last_trade_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "LastTradePrice",
                        "example": 19.22
                    },
                    "last_trade_size": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "LastTradeSize",
                        "example": 100
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "BLOX"
                    },
                    "timestamp": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Timestamp",
                        "example": 1750260240000
                    },
                    "todays_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TodaysChange",
                        "example": 0.05059999999999931
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "MarketStatus": {
                "type": "object",
                "properties": {
                    "market_open": {
                        "type": "boolean",
                        "x-go-name": "MarketOpen",
                        "example": true
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "MultiPeriodSentimentMetrics": {
                "type": "object",
                "properties": {
                    "percent_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PercentChange",
                        "example": -100
                    },
                    "sentiment_1d": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Sentiment1D",
                        "example": 0
                    },
                    "sentiment_30d": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Sentiment30D",
                        "example": 0.099
                    },
                    "sentiment_7d": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Sentiment7D",
                        "example": 0.118
                    },
                    "sentiment_90d": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Sentiment90D",
                        "example": 0.099
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "OptionsChain": {
                "type": "object",
                "properties": {
                    "contracts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormattedOptionsContract"
                        },
                        "x-go-name": "Contracts"
                    },
                    "current_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "CurrentPrice",
                        "example": 196.41
                    },
                    "expiration_dates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-go-name": "ExpirationDates",
                        "example": [
                            "2025-08-15"
                        ]
                    },
                    "fetch_time": {
                        "type": "string",
                        "format": "date-time",
                        "x-go-name": "FetchTime",
                        "example": "2025-06-18T19:53:04.356904964Z"
                    },
                    "max_pain": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "MaxPain",
                        "example": 200
                    },
                    "put_call_ratio": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PutCallRatio",
                        "example": 0.8284810263862831
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "AAPL"
                    },
                    "total_contracts": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "TotalContracts",
                        "example": 1
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "OptionsFilterRanges": {
                "description": "OptionsFilterRanges contains min/max values for all filterable fields",
                "type": "object",
                "properties": {
                    "breakEvenPrice": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "currentPrice": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "delta": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "gamma": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "impliedVolatility": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "maxExpirationDate": {
                        "type": "string",
                        "x-go-name": "MaxExpirationDate",
                        "example": "2025-07-25"
                    },
                    "minExpirationDate": {
                        "type": "string",
                        "x-go-name": "MinExpirationDate",
                        "example": "2025-07-03"
                    },
                    "openInterest": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "priceChange": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "priceChangePercentage": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "strikePrice": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "theta": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "totalContracts": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "TotalContracts",
                        "example": 290
                    },
                    "vega": {
                        "$ref": "#/components/schemas/FilterRange"
                    },
                    "volume": {
                        "$ref": "#/components/schemas/FilterRange"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "PerformanceData": {
                "type": "object",
                "properties": {
                    "best_performer": {
                        "$ref": "#/components/schemas/PerformerInfo"
                    },
                    "daily_standard_deviation": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "StandardDeviation"
                    },
                    "other_performers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PerformerInfo"
                        },
                        "x-go-name": "OtherPerformers"
                    },
                    "total_daily_gain": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalDailyGain"
                    },
                    "total_daily_gain_perc": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalDailyGainPerc"
                    },
                    "total_gain": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalGain"
                    },
                    "total_gain_perc": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalGainPerc"
                    },
                    "total_value": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalValue"
                    },
                    "volatility": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Volatility"
                    },
                    "worst_performer": {
                        "$ref": "#/components/schemas/PerformerInfo"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "PerformerInfo": {
                "type": "object",
                "properties": {
                    "percent_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PercentChange"
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "PeriodBlock": {
                "type": "object",
                "properties": {
                    "date_estimate_published": {
                        "type": "string",
                        "x-go-name": "DateEstimatePublished",
                        "example": "2021-01-01"
                    },
                    "metrics": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        },
                        "x-go-name": "Metrics"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "PriceForecastItem": {
                "type": "object",
                "title": "PriceForecastItem represents a single price forecast for a ticker.",
                "properties": {
                    "current_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "CurrentPrice",
                        "example": 195.72
                    },
                    "current_price_timestamp": {
                        "type": "string",
                        "x-go-name": "CurrentPriceTimestamp",
                        "example": "2025-06-18 14:54:20"
                    },
                    "date": {
                        "type": "string",
                        "x-go-name": "Date",
                        "example": "2025-06-18"
                    },
                    "date_of_price_used": {
                        "type": "string",
                        "x-go-name": "DateOfPriceUsed",
                        "example": "2025-06-18"
                    },
                    "predicted_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PredictedPrice",
                        "example": 195.72
                    },
                    "prediction_percent_diff": {
                        "type": "string",
                        "x-go-name": "PredictionPercentDiff",
                        "example": "1.23"
                    },
                    "price_used_for_prediction": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PriceUsedForPrediction",
                        "example": 195.72
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "AAPL"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "RiskAnalysisScores": {
                "type": "object",
                "properties": {
                    "analysis": {
                        "$ref": "#/components/schemas/Analysis"
                    },
                    "current_events_risk_factors": {
                        "type": "string",
                        "x-go-name": "CurrentEventsRiskFactors",
                        "example": "75"
                    },
                    "news_risk_factor": {
                        "type": "string",
                        "x-go-name": "NewsRiskFactor",
                        "example": "70"
                    },
                    "overall_risk": {
                        "type": "string",
                        "x-go-name": "OverallRisk",
                        "example": "75"
                    },
                    "price_movement_risk_factors": {
                        "type": "string",
                        "x-go-name": "PriceMovementRiskFactors",
                        "example": "65"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ScreenRequest": {
                "type": "object",
                "required": [
                    "criteria",
                    "period",
                    "cutoff_date"
                ],
                "properties": {
                    "criteria": {
                        "description": "List of filter criteria to apply to stocks",
                        "type": "array",
                        "minItems": 1,
                        "items": {
                            "$ref": "#/components/schemas/FilterCriteria"
                        },
                        "x-go-name": "Criteria"
                    },
                    "cutoff_date": {
                        "description": "Cut-off date in ISO format (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS)",
                        "type": "string",
                        "x-go-name": "CutoffDate"
                    },
                    "period": {
                        "description": "Period type for screening (QUARTERLY or ANNUAL)",
                        "type": "string",
                        "x-go-name": "Period"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ScreenResponse": {
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/ScreenerResult"
                    },
                    "error": {
                        "description": "Error message if success is false",
                        "type": "string",
                        "x-go-name": "Error"
                    },
                    "success": {
                        "description": "Indicates if the request was successful",
                        "type": "boolean",
                        "x-go-name": "Success"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "ScreenerResult": {
                "type": "object",
                "properties": {
                    "matching_tickers": {
                        "description": "List of matching tickers with their metric values\nEach object contains the ticker symbol, report_date, and the values for requested metrics",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "additionalProperties": {}
                        },
                        "x-go-name": "MatchingTickers"
                    },
                    "total_tickers": {
                        "description": "Total number of tickers evaluated",
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "TotalTickers"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "SearchResponse": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Count"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SearchResultItem"
                        },
                        "x-go-name": "Results"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "SearchResultItem": {
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "SkeletonNewsArticle": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "x-go-name": "Id",
                        "example": "f229ecb06b0c32b98e52519c51ee6ec1a01279e2a62f2288399f5a59ed8177b6"
                    },
                    "image_url": {
                        "type": "string",
                        "x-go-name": "ImageURL",
                        "example": "https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iNPdNm9msB_k/v0/1200x800.jpg"
                    },
                    "market_impact_score": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "MarketImpact",
                        "example": 0.9
                    },
                    "published_at": {
                        "type": "string",
                        "x-go-name": "PublishedAt",
                        "example": "2025-06-18 13:40:48"
                    },
                    "sentiment_label": {
                        "type": "string",
                        "x-go-name": "SentimentLabel",
                        "example": "extremely negative"
                    },
                    "sentiment_score": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "SentimentScore",
                        "example": -0.9
                    },
                    "source": {
                        "type": "string",
                        "x-go-name": "Source",
                        "example": "Bloomberg"
                    },
                    "summary": {
                        "type": "string",
                        "x-go-name": "Summary",
                        "example": "The UN nuclear watchdog, IAEA, reports that the location of Iran's 409-kilogram stockpile of near-bomb-grade enriched uranium..."
                    },
                    "themes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-go-name": "Themes",
                        "example": [
                            "Geopolitics & War",
                            "Sanctions & Export Controls",
                            "Energy Markets & Prices"
                        ]
                    },
                    "tickers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TickerItem"
                        },
                        "x-go-name": "Tickers",
                        "example": null
                    },
                    "title": {
                        "type": "string",
                        "x-go-name": "Title",
                        "example": "Iran Near-Bomb-Grade Uranium's Location Uncertain, UN Watchdog Says"
                    },
                    "url": {
                        "type": "string",
                        "x-go-name": "URL",
                        "example": "https://www.bloomberg.com/news/articles/2025-06-18/iran-nuclear-infrastructure-location-of-enriched-uranium-stocks-uncertain"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "StockData": {
                "type": "object",
                "properties": {
                    "change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Change",
                        "example": 1.3170000000000073
                    },
                    "change_percent": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ChangePercent",
                        "example": 0.6731752197914574
                    },
                    "previous_day": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "PreviousDay",
                        "example": 195.64
                    },
                    "price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "LastPrice",
                        "example": 196.957
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "StockSplitsData": {
                "type": "object",
                "properties": {
                    "execution_date": {
                        "type": "string",
                        "x-go-name": "ExecutionDate",
                        "example": "2022-08-25"
                    },
                    "split_from": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "SplitFrom",
                        "example": 1
                    },
                    "split_to": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "SplitTo",
                        "example": 3
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "TSLA"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "SymbolOhlcvStats": {
                "type": "object",
                "title": "NewTopMarketStocksService creates a new instance of TopMarketStocksService.",
                "properties": {
                    "change_pct": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ChangePct",
                        "example": 1
                    },
                    "close_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "ClosePrice",
                        "example": 100
                    },
                    "open_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "OpenPrice",
                        "example": 100
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "AAPL"
                    },
                    "total_volume": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "TotalVolume",
                        "example": 1000000
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "TickerForecasts": {
                "description": "The map key is the ticker symbol, and the value is a slice of forecast items.",
                "type": "object",
                "title": "TickerForecasts represents forecast data for each ticker symbol.",
                "additionalProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/components/schemas/PriceForecastItem"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "TickerInfo": {
                "type": "object",
                "properties": {
                    "avgPrice": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AvgPrice"
                    },
                    "isIndex": {
                        "type": "boolean",
                        "x-go-name": "IsIndex"
                    },
                    "numShares": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "NumShares"
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "TickerItem": {
                "type": "object",
                "properties": {
                    "company_name": {
                        "type": "string",
                        "x-go-name": "CompanyName"
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "TickerProfile": {
                "type": "object",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "x-go-name": "Active",
                        "example": true
                    },
                    "cik": {
                        "type": "string",
                        "x-go-name": "CIK",
                        "example": "0000320193"
                    },
                    "currency": {
                        "type": "string",
                        "x-go-name": "Currency",
                        "example": "usd"
                    },
                    "description": {
                        "type": "string",
                        "x-go-name": "Description",
                        "example": "Apple is among the largest companies in the world, ...."
                    },
                    "future_earnings": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-go-name": "FutureEarnings",
                        "example": [
                            "2026-04-29",
                            "2026-01-28",
                            "2025-10-29",
                            "2025-08-07"
                        ]
                    },
                    "locale": {
                        "type": "string",
                        "x-go-name": "Locale",
                        "example": "us"
                    },
                    "market": {
                        "type": "string",
                        "x-go-name": "Market",
                        "example": "stocks"
                    },
                    "name": {
                        "type": "string",
                        "x-go-name": "Name",
                        "example": "Apple Inc."
                    },
                    "related_tickers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "x-go-name": "RelatedTickers",
                        "example": [
                            "MSFT",
                            "GOOGL",
                            "AMZN",
                            "GOOG",
                            "NVDA",
                            "TSLA",
                            "META",
                            "NFLX",
                            "DIS",
                            "BRK.B"
                        ]
                    },
                    "share_class_shares_outstanding": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "ShareClassSharesOutstanding",
                        "example": 0
                    },
                    "ticker": {
                        "type": "string",
                        "x-go-name": "Ticker",
                        "example": "AAPL"
                    },
                    "weighted_shares_outstanding": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "WeightedSharesOutstanding",
                        "example": 14935826000
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "TradeData": {
                "description": "TradeData represents individual trade data from the sorted set",
                "type": "object",
                "properties": {
                    "price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Price",
                        "example": 195.72
                    },
                    "timestamp": {
                        "type": "string",
                        "x-go-name": "Timestamp",
                        "example": "2025-06-18 14:54:20"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "TradesDataResponse": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Count",
                        "example": 100
                    },
                    "symbol": {
                        "type": "string",
                        "x-go-name": "Symbol",
                        "example": "AAPL"
                    },
                    "trades": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TradeData"
                        },
                        "x-go-name": "Trades"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "TreasuryRatesData": {
                "description": "TreasuryRatesData represents treasury rates for a single date",
                "type": "object",
                "properties": {
                    "date": {
                        "type": "string",
                        "x-go-name": "Date",
                        "example": "2025-03-17"
                    },
                    "month1": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Month1",
                        "example": 4.37
                    },
                    "month2": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Month2",
                        "example": 4.33
                    },
                    "month3": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Month3",
                        "example": 4.34
                    },
                    "month6": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Month6",
                        "example": 4.29
                    },
                    "year1": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year1",
                        "example": 4.11
                    },
                    "year10": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year10",
                        "example": 4.31
                    },
                    "year2": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year2",
                        "example": 4.06
                    },
                    "year20": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year20",
                        "example": 4.64
                    },
                    "year3": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year3",
                        "example": 4.03
                    },
                    "year30": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year30",
                        "example": 4.6
                    },
                    "year5": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year5",
                        "example": 4.11
                    },
                    "year7": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Year7",
                        "example": 4.21
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "VolumeCluster": {
                "type": "object",
                "properties": {
                    "price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "Price",
                        "example": 195.07
                    },
                    "volume": {
                        "type": "integer",
                        "format": "uint64",
                        "x-go-name": "Volume",
                        "example": 201
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "WatchlistData": {
                "type": "object",
                "properties": {
                    "indexes": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/WatchlistTickerData"
                        },
                        "x-go-name": "Indexes"
                    },
                    "performance": {
                        "$ref": "#/components/schemas/PerformanceData"
                    },
                    "stocks": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/WatchlistTickerData"
                        },
                        "x-go-name": "Stocks"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            },
            "WatchlistTickerData": {
                "type": "object",
                "properties": {
                    "average_cost": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "AverageCost"
                    },
                    "current_day_info": {
                        "$ref": "#/components/schemas/CurrentDayInfo"
                    },
                    "current_price": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "CurrentPrice"
                    },
                    "days_change": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DaysChange"
                    },
                    "days_change_perc": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "DaysChangePerc"
                    },
                    "extra_info": {
                        "$ref": "#/components/schemas/ExtraInfo"
                    },
                    "full_name": {
                        "type": "string",
                        "x-go-name": "FullName"
                    },
                    "historical_data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DailyRowData"
                        },
                        "x-go-name": "HistoricalData"
                    },
                    "shares": {
                        "type": "integer",
                        "format": "int64",
                        "x-go-name": "Shares"
                    },
                    "total_gain": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalGain"
                    },
                    "total_gain_perc": {
                        "type": "number",
                        "format": "double",
                        "x-go-name": "TotalGainPerc"
                    }
                },
                "x-go-package": "github.com/api-with-go/app/logic/models"
            }
        }
    }
}